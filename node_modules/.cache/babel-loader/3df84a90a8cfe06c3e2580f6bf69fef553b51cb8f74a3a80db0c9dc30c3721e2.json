{"ast":null,"code":"var _jsxFileName = \"D:\\\\learn\\\\GitHub\\\\appstepikjavareact\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import \"./App.css\";\n// import TablewView from \"./layouts/components/tableView/TablewView\";\n// import { useEffect, useState } from \"react\";\n// import FormNewItem from \"./layouts/components/FormNewItem\";\n// import ModalDeleteContact from \"./layouts/components/ModalDeleteContact\";\n// import axios from \"axios\";\n\n// function App() {\n//     const [items, setItems] = useState([]);\n//     const [loading, setLoading] = useState(false);\n//     const [isModalOpen, setIsModalOpen] = useState(false);\n//     const [currentContactId, setCurrentContactId] = useState(null);\n\n//     useEffect(() => {\n//         console.log(\"Fetching contacts...\");\n//         axios\n//             .get(\"http://localhost:8080/api/contacts\")\n//             .then((res) => {\n//                 const data = res.data._embedded.contacts.map((item) => ({\n//                     id: item.id,\n//                     fullName: item.fullName,\n//                     phone: item.phone,\n//                     notes: item.notes,\n//                 }));\n//                 setItems(data);\n//                 console.log(\"Contacts loaded:\", data);\n//             })\n//             .catch((error) => console.error(\"Error fetching contacts:\", error));\n//     }, []);\n\n//     const appendContact = (fullName, phone, notes) => {\n//         const contact = {\n//             fullName,\n//             phone,\n//             notes,\n//         };\n\n//         const url = \"http://localhost:8080/api/contacts\";\n//         setLoading(true); // Включить индикатор загрузки\n//         axios\n//             .post(url, contact)\n//             .then((res) => {\n//                 contact.id = res.data.id;\n//                 setItems([...items, contact]);\n//             })\n//             .catch((error) => console.error(\"Error adding contact:\", error))\n//             .finally(() => {\n//                 setLoading(false); // Выключить индикатор загрузки\n//             });\n//     };\n\n//     const onToggleModal = (id = null) => {\n//         setIsModalOpen((prev) => !prev);\n//         setCurrentContactId(id);\n//     };\n\n//     const removeContact = () => {\n//         if (!currentContactId) {\n//             console.error(\"No contact ID to delete\");\n//             return;\n//         }\n//         const url = `http://localhost:8080/api/contacts/${currentContactId}`;\n//         axios\n//             .delete(url)\n//             .then(() => {\n//                 setItems(items.filter((item) => item.id !== currentContactId));\n//                 console.log(\"Contact deleted with ID:\", currentContactId);\n//             })\n//             .catch((error) => console.error(\"Error deleting contact:\", error))\n//             .finally(() => {\n//                 onToggleModal(); // Закрыть модальное окно\n//             });\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <div className=\"card\">\n//                 <div className=\"card-header\">\n//                     <h1>Contact App</h1>\n//                 </div>\n//                 <div className=\"card-body\">\n//                     <TablewView\n//                         data={items}\n//                         removeContact={onToggleModal} // Передаём функцию открытия модального окна\n//                     />\n//                     <FormNewItem\n//                         appContact={appendContact}\n//                         disabled={loading}\n//                     />\n//                 </div>\n//             </div>\n//             <ModalDeleteContact\n//                 isOpen={isModalOpen}\n//                 onModal={removeContact} // Удаляем контакт\n//                 onCancel={() => onToggleModal(false)} // Закрыть модальное окно\n//             />\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from \"react\";\nimport { getContacts, addContact, deleteContact } from \"./api\";\nimport ModalDeleteContact from \"./layouts/components/ModalDeleteContact\";\nimport TableView from \"./layouts/components/tableView/TableView\";\nimport FormNewItem from \"./layouts/formNewItem/FormNewItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [contactToDelete, setContactToDelete] = useState(null);\n  useEffect(() => {\n    getContacts().then(setContacts).catch(error => console.error(\"Error fetching contacts:\", error));\n  }, []);\n  const handleAddContact = contact => {\n    addContact(contact).then(newContact => setContacts(prevContacts => [...prevContacts, newContact])).catch(error => console.error(\"Error adding contact:\", error));\n  };\n  const handleDeleteContact = id => {\n    setContactToDelete(id);\n    setModalOpen(true);\n  };\n  const confirmDelete = () => {\n    deleteContact(contactToDelete).then(() => {\n      setContacts(prevContacts => prevContacts.filter(c => c.id !== contactToDelete));\n      setModalOpen(false);\n      setContactToDelete(null);\n    }).catch(error => console.error(\"Error deleting contact:\", error));\n  };\n  const cancelDelete = () => {\n    setModalOpen(false);\n    setContactToDelete(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ContactApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormNewItem, {\n      onAdd: handleAddContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableView, {\n      contacts: contacts,\n      onDelete: handleDeleteContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(ModalDeleteContact, {\n      onConfirm: confirmDelete,\n      onCancel: cancelDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"QDyEzeCUA66ZMvNwWTfSDaJXebo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getContacts","addContact","deleteContact","ModalDeleteContact","TableView","FormNewItem","jsxDEV","_jsxDEV","App","_s","contacts","setContacts","modalOpen","setModalOpen","contactToDelete","setContactToDelete","then","catch","error","console","handleAddContact","contact","newContact","prevContacts","handleDeleteContact","id","confirmDelete","filter","c","cancelDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","onDelete","onConfirm","onCancel","_c","$RefreshReg$"],"sources":["D:/learn/GitHub/appstepikjavareact/client/src/App.js"],"sourcesContent":["// import \"./App.css\";\r\n// import TablewView from \"./layouts/components/tableView/TablewView\";\r\n// import { useEffect, useState } from \"react\";\r\n// import FormNewItem from \"./layouts/components/FormNewItem\";\r\n// import ModalDeleteContact from \"./layouts/components/ModalDeleteContact\";\r\n// import axios from \"axios\";\r\n\r\n// function App() {\r\n//     const [items, setItems] = useState([]);\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [isModalOpen, setIsModalOpen] = useState(false);\r\n//     const [currentContactId, setCurrentContactId] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         console.log(\"Fetching contacts...\");\r\n//         axios\r\n//             .get(\"http://localhost:8080/api/contacts\")\r\n//             .then((res) => {\r\n//                 const data = res.data._embedded.contacts.map((item) => ({\r\n//                     id: item.id,\r\n//                     fullName: item.fullName,\r\n//                     phone: item.phone,\r\n//                     notes: item.notes,\r\n//                 }));\r\n//                 setItems(data);\r\n//                 console.log(\"Contacts loaded:\", data);\r\n//             })\r\n//             .catch((error) => console.error(\"Error fetching contacts:\", error));\r\n//     }, []);\r\n\r\n//     const appendContact = (fullName, phone, notes) => {\r\n//         const contact = {\r\n//             fullName,\r\n//             phone,\r\n//             notes,\r\n//         };\r\n\r\n//         const url = \"http://localhost:8080/api/contacts\";\r\n//         setLoading(true); // Включить индикатор загрузки\r\n//         axios\r\n//             .post(url, contact)\r\n//             .then((res) => {\r\n//                 contact.id = res.data.id;\r\n//                 setItems([...items, contact]);\r\n//             })\r\n//             .catch((error) => console.error(\"Error adding contact:\", error))\r\n//             .finally(() => {\r\n//                 setLoading(false); // Выключить индикатор загрузки\r\n//             });\r\n//     };\r\n\r\n//     const onToggleModal = (id = null) => {\r\n//         setIsModalOpen((prev) => !prev);\r\n//         setCurrentContactId(id);\r\n//     };\r\n\r\n//     const removeContact = () => {\r\n//         if (!currentContactId) {\r\n//             console.error(\"No contact ID to delete\");\r\n//             return;\r\n//         }\r\n//         const url = `http://localhost:8080/api/contacts/${currentContactId}`;\r\n//         axios\r\n//             .delete(url)\r\n//             .then(() => {\r\n//                 setItems(items.filter((item) => item.id !== currentContactId));\r\n//                 console.log(\"Contact deleted with ID:\", currentContactId);\r\n//             })\r\n//             .catch((error) => console.error(\"Error deleting contact:\", error))\r\n//             .finally(() => {\r\n//                 onToggleModal(); // Закрыть модальное окно\r\n//             });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"container mt-5\">\r\n//             <div className=\"card\">\r\n//                 <div className=\"card-header\">\r\n//                     <h1>Contact App</h1>\r\n//                 </div>\r\n//                 <div className=\"card-body\">\r\n//                     <TablewView\r\n//                         data={items}\r\n//                         removeContact={onToggleModal} // Передаём функцию открытия модального окна\r\n//                     />\r\n//                     <FormNewItem\r\n//                         appContact={appendContact}\r\n//                         disabled={loading}\r\n//                     />\r\n//                 </div>\r\n//             </div>\r\n//             <ModalDeleteContact\r\n//                 isOpen={isModalOpen}\r\n//                 onModal={removeContact} // Удаляем контакт\r\n//                 onCancel={() => onToggleModal(false)} // Закрыть модальное окно\r\n//             />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { getContacts, addContact, deleteContact } from \"./api\";\r\nimport ModalDeleteContact from \"./layouts/components/ModalDeleteContact\";\r\nimport TableView from \"./layouts/components/tableView/TableView\";\r\nimport FormNewItem from \"./layouts/formNewItem/FormNewItem\";\r\n\r\nconst App = () => {\r\n    const [contacts, setContacts] = useState([]);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [contactToDelete, setContactToDelete] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getContacts()\r\n            .then(setContacts)\r\n            .catch((error) => console.error(\"Error fetching contacts:\", error));\r\n    }, []);\r\n\r\n    const handleAddContact = (contact) => {\r\n        addContact(contact)\r\n            .then((newContact) =>\r\n                setContacts((prevContacts) => [...prevContacts, newContact])\r\n            )\r\n            .catch((error) => console.error(\"Error adding contact:\", error));\r\n    };\r\n\r\n    const handleDeleteContact = (id) => {\r\n        setContactToDelete(id);\r\n        setModalOpen(true);\r\n    };\r\n\r\n    const confirmDelete = () => {\r\n        deleteContact(contactToDelete)\r\n            .then(() => {\r\n                setContacts((prevContacts) =>\r\n                    prevContacts.filter((c) => c.id !== contactToDelete)\r\n                );\r\n                setModalOpen(false);\r\n                setContactToDelete(null);\r\n            })\r\n            .catch((error) => console.error(\"Error deleting contact:\", error));\r\n    };\r\n\r\n    const cancelDelete = () => {\r\n        setModalOpen(false);\r\n        setContactToDelete(null);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>ContactApp</h1>\r\n            <FormNewItem onAdd={handleAddContact} />\r\n            <TableView contacts={contacts} onDelete={handleDeleteContact} />\r\n            {modalOpen && (\r\n                <ModalDeleteContact\r\n                    onConfirm={confirmDelete}\r\n                    onCancel={cancelDelete}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}